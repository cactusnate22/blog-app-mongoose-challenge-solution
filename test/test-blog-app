'use strict';

const chai = require('chai');
const chaiHttp = require('chai-http');
const faker = require('faker');
const mongoose = require('mongoose');

const expect = chai.expect;

//do I have the correct syntax for path to files(models.js, server.js, etc)?
const {BlogPost} = require('../models');
const {app, runServer, closeServer} = require('../server');
const {TEST_DATABASE_URL} = require('../config');

chai.use(chaiHttp);

function seedBlogData() {
  console.info('seeding blog data');
  const seedData = [];

  for (let i=1; i <= 10; i++) {
    seedData.push(generateBlogData());
  }
  //return promise...
  return BlogPost.insertMany(seedData);
}

//create blog data for db

//author name...should I write two functions..one for
//first names and one for last????
// function generateAuthorName(){
//   const authors = [
//     //should I just create an array of names
//     'Ron', 'Aleta', 'Serena', 'Gracey', 'Theresa'
//   ];
//   return authors[Math.floor(Math.random() * authors.length)];
// }

// function generateTitle() {
//
// }
//
// function generateContent() {
//
// }

function generateBlogData() {
  return {
    author: {
      'first name': faker.Name.firstName(),
      'last name': faker.Name.lastName()
    },
    title: faker.Lorem.words(),
    content: faker.Lorem.paragraph()
  };
}

function tearDownDb() {
  console.warn('Deleting database');
  return mongoose.connection.dropDatabase();
}

describe('Blog API resource', function() {

  before(function() {
    return runServer(TEST_DATABASE_URL);
  });

  beforeEach(function() {
    return seedBlogData();
  });

  afterEach(function() {
    return tearDownDb();
  });

  after(function() {
    return closeServer();
  });

  describe('GET endpoint', function() {

    it('should return all existing blog posts', function() {
      // need to have access to mutate and access `res` across
      // `.then()` calls below, so declare it here so can modify in place
      let res;
      return chai.request(app)
      .get('/blog-posts')
      .then(function(_res) {
        res = _res;
        expect(res).to.have.status(200);
        expect(res.body.blog-posts)
      });
    });
  });
})
